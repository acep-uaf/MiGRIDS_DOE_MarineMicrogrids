<?xml version="1.0" encoding="UTF-8"?>
<!-- Project: MiGRIDS Tool -->
<!-- Author: Jeremy VanderMeer, jbvandermeer@alaska.edu-->
<!-- Date: October 27, 2017 -->
<!-- License: MIT License (see LICENSE file of this package for more information -->

<!-- This file describes an interface for all components that may be part of the model. It does not itself implement a -->
<!-- specific component and thus should not directly be used as description for a component. -->

<!-- Root tag is 'project' -->
<project name = 'project name'>
    <!-- Declaration of inheritance - the interface itself should be the master parent. Later more specific -->
    <!-- project descriptions should state the immediate parent here. All have to be traceable to this interface. -->
    <childOf>self</childOf>


    <inputFileDir value=""><!-- 'inputFileDir' is the directory where the input data files are stored.  --></inputFileDir>


    <inputFileType value="">  <!-- 'inputFileType' is the file type of the input data files. Eg '.CSV'  -->  </inputFileType>


    <inputFileFormat value=""><!-- 'inputFileFormat' is format that the input files are in. This includes formatting specific to certain data sources
      where a script has been specifically generated to deal with the data. For example 'AVEC'. If this is not specified
      Then it will assume that the data files are organized in a data table with a header at the top. -->


    </inputFileFormat>
    <componentNames value="" >
    <!-- 'componentNames' is a tuple of the names of components in the grid. Acceptable names must start with corresponding
     names to the component descriptor files, including: 'Gen', 'Wtg', 'Inv', 'Tes', 'Ees' and 'ControlledLoad'. For example 'Gen1',
      'Gen2', 'Wtg1',... -->
      </componentNames>
    <componentChannels>
        <!-- 'componentChannels' describes the input data channels corresponding to grid components to read into the simulation.
    The tuple 'headerName' is the names or indices of the columns in the input data files. The component names are the names
    in the componentDescriptor files. 'componentAttribute' describes what was measured and what the units were. For example,
    real power and kW. Possible values for componentAttribute include 'P' (real power), 'Q' (reactive power), 'S' (apparent
    power), 'pf' (power factor), 'V' (voltage), 'I' (current), 'f' (frequency), 'Tamb' (ambient temperature), 'Tstorage'
    (internal temperature for thermal storatge), 'WS' (windspeed), 'IR' (solar irradiation), 'WF' (water flow), 'Pavail'
    (available real power), 'Qavail' (available reactive power), 'Savail' (available apparent power). Available units
     for power include 'W', 'kW', 'MW', 'var', 'kvar', 'Mvar', 'VA', 'kVA', 'MVA'. Available units for voltage includes
     'V' and 'kV'. Available units for current are 'A' and 'kA'. Available units for frequency is 'Hz'. Available units
     for temperature are 'C', 'F' and 'K'. Available units for speed are 'm/s', 'ft/s', 'km/hr' and 'mi/hr'. Available
     units for irradiation is 'W/m2'. Available units for flow include 'm3/s', 'L/s', 'cfm' and 'gal/min'  -->

        <headerName value=""/><componentName value=""/><componentAttribute value="" unit=""/>
    </componentChannels>


    <dateChannel value="" format="">
<!-- 'dateChannel' the name or index of the data channel with the timestamps. 'value' is the name or index. 'format'
      is the format of the date, for example 'ordinal'. -->
    </dateChannel>
       <timeChannel value="" format=""><!-- 'timeChannel' the name or index of the data channel with the times of day. 'value' is the name or index. 'format'
      is the format of the time, for example 'HH:MM:SS:MS'. Also accepted is time as a fraction of 24 hours ('excel').
      If this is not set, then the timestamps will be assumed to be incorporated into the dataChannel. -->
       </timeChannel>

    <timeZone value="UTC"><!--'timeZone' the name of the timezone date and time are in. Default is 'UTC'.-->
    </timeZone>

    <inputUTCOffset value="0" unit="hr">
<!-- 'inputUTCOffset' is the offset in hours from UTC time that input timestamps are in.   -->
    </inputUTCOffset>

    <inputDST value="F" unit="bool"><!-- 'inputDST' Indicates whether the input time values are daylight savings time.   -->
    </inputDST>


    <flexibleYear value="False" unit="bool"> <!-- 'flexibleYear' Indicates whether the year of the input data can be changec to align with other available data.
    For example, Load data may be available for one year and wind data for another. Making the year flexible on one or
    both datasets will allow them to be run together as though they occured the same year. Default is False.    -->
    </flexibleYear>


    <realLoadChannel value="" unit=""> <!-- 'realLoadChannel' is the name or index of the total grid real load. If this is not set, then the load will be
     calculated as the difference between all input generating unit data channels and input controllable loads data
     channels. -->
    </realLoadChannel>


    <minRealLoad value="" unit="">
 <!-- 'minRealLoad' is the minimum real load expected.  -->
    </minRealLoad>

    <maxRealLoad value="" unit="">
<!-- 'maxRealLoad' is the maximum real load expected.  -->
    </maxRealLoad>

    <imaginaryLoadChannel value="" unit="">
 <!-- 'imaginaryLoadChannel' is the name or index of the total grid imaginary load. If this is not set, then the load will be
     calculated as the difference between all input generating unit data channels and input controllable loads data
     channels. -->
    </imaginaryLoadChannel>

    <inputTimeStep value="1" unit="min"><!-- 'inputTimeStep' is the original timestep recorded in the raw timeseries data fed into the model.
     Default is 1 minute. -->
    </inputTimeStep>


    <timeStep value="1" unit="s">
            <!-- 'timeStep' is the desired timestep to be used in the simulation. The data will be resampled to this value.
     Default is 1 second. -->
    </timeStep>

    <runTimeSteps value="all" > <!-- 'runTimeSteps' is the timesteps to run. This can be 'all', an integer that the simulation runs up till, a list
        of two values of the start and stop indecies, or a list of indecies of length greater than 2 to use directly. -->
    </runTimeSteps>


    <loadProfileFile value="load0P.nc" >
            <!-- 'loadProfileFile' is the filename of the load profile that is saved in
    ProjectDirectory/InputData/TimeSeries/Processed. The default value is 'load0.nc'. -->
    </loadProfileFile>


    <predictLoad value="predictLoad1">
            <!-- 'predictLoad' refers to the function that is used to predict the load. If a user defines their own load
    predicting function, it is the path and filename of the function used to predict short term (several hours) future
    load. Otherwise, it is the name of the dispatch filename included in the software package. Options include:
    predictLoad0. The class name in the file must be 'predictLoad'. Inputs to the class are the load profile up till the
    current time step and the date-time in epoch format. Default is predictLoad1 -->
    </predictLoad>


    <predictWind value="predictWind0">
            <!-- 'predictWind' refers to the function that is used to predict the wind speed. If a user defines their own wind
    predicting function, it is the path and filename of the function used to predict short term (several hours) future
    load. Otherwise, it is the name of the dispatch filename included in the software package. Options include:
    predictWind0. The class name in the file must be 'predictWind'. Inputs to the class are the wind speed profile up
    till the current time step and the date-time in epoch format. Default is predictWind0 -->
    </predictWind>

    <!-- 'eesDispatch' refers to the class that is used to dispatch the energy storage units.  If a user defines their
    own dispatch, it is the path and filename of the dispatch class used to dispatch the energy storage units.
    Otherwise, it is the name of the dispatch filename included in the software package. Options include: eesDispatch0.
    The class name in the file must be 'eesDispatch'. Default value is 'eesDispatch0'-->
    <eesDispatch value="eesDispatch0"/>


    <tesDispatch value="tesDispatch0">
<!-- 'tesDispatch' refers to the class that is used to dispatch the thermal energy storage units.  If a user defines their
    own dispatch, it is the path and filename of the dispatch class used to dispatch the energy storage units.
    Otherwise, it is the name of the dispatch filename included in the software package. Options include: tesDispatch0.
    The class name in the file must be 'tesDispatch'. Default value is 'eesDispatch0'-->
    </tesDispatch>

    <genDispatch value="genDispatch0">
            <!-- 'genDispatch' refers to the class that is used to dispatch the generators.  If a user defines their
    own dispatch, it is the path and filename of the dispatch class used to dispatch the generators.
    Otherwise, it is the name of the dispatch filename included in the software package. Options include: genDispatch0.
    The class name in the file must be 'genDispatch'. Default value is 'genDispatch0'-->
    </genDispatch>


    <genSchedule value="genSchedule0">
<!-- 'genSchedule' refers to the class that is used to schedule the generators.  If a user defines their
    own schedule, it is the path and filename of the dispatch class used to schedule the generators.
    Otherwise, it is the name of the schedule filename included in the software package. Options include: genSchedule0.
    The class name in the file must be 'genSchedule'. Default value is 'genSchedule0'-->
    </genSchedule>

    <wtgDispatch value="wtgDispatch0">
 <!-- 'wtgDispatch' refers to the class that is used to dispatch the wind turbines.  If a user defines their
    own dispatch, it is the path and filename of the dispatch class used to dispatch the wind turbines.
    Otherwise, it is the name of the dispatch filename included in the software package. Options include: wtgDispatch0.
    The class name in the file must be 'wtgDispatch'. Default value is 'wtgDispatch0'-->
    </wtgDispatch>

    <reDispatch value="reDispatch0">
            <!-- 'reDispatch' refers to the class that is used to dispatch all renewable energy sources into the grid.  If a
    user defines their own dispatch, it is the path and filename of the dispatch class used to dispatch the RE.
    Otherwise, it is the name of the dispatch filename included in the software package. Options include: reDispatch0.
    The class name in the file must be 'reDispatch'. Default value is 'wtgDispatch0'-->
    </reDispatch>


    <getMinSrc value="getMinSrc0">
             <!-- 'getMinSrc' refers to the class that is used to calculate the minimum required spinning reserve capacity. If
    the user defines their own calculation, it is the path and the filename of the class with the src calculation.
    Otherwise, it is the name of the filename included in the software package. Options include: getMinSrc0. The class
    name in the file must be 'getMinSrc'. Default value is 'getMinSrc0'. -->
    </getMinSrc>

</project>
<!-- EOF -->